/**
 * Eurofurence API for Mobile Apps
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.eurofurence.data.apis

import org.eurofurence.data.infrastructure.*
import org.eurofurence.data.models.KnowledgeGroupRecord

class KnowledgeGroupsApi(basePath: kotlin.String = "https://localhost") : ApiClient(basePath) {

    /**
     * Delete a knowledge group.
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Developer&#x60;**, **&#x60;System&#x60;**
     * @param id
     * @return void
     */
    fun apiV2KnowledgeGroupsByIdDelete(id: java.util.UUID): Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/Api/v2/KnowledgeGroups/{Id}".replace("{" + "Id" + "}", "$id"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Retrieve a single knowledge group.
     *
     * @param id id of the requested entity
     * @return KnowledgeGroupRecord
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2KnowledgeGroupsByIdGet(id: java.util.UUID): KnowledgeGroupRecord {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/KnowledgeGroups/{Id}".replace("{" + "Id" + "}", "$id"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<KnowledgeGroupRecord>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as KnowledgeGroupRecord
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Update an existing knowledge group.
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Developer&#x60;**, **&#x60;System&#x60;**
     * @param id
     * @param record  (optional)
     * @return void
     */
    fun apiV2KnowledgeGroupsByIdPut(id: java.util.UUID, record: KnowledgeGroupRecord): Unit {
        val localVariableBody: kotlin.Any? = record
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/Api/v2/KnowledgeGroups/{Id}".replace("{" + "Id" + "}", "$id"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Retrieves a list of all knowledge groups.
     *
     * @return kotlin.Array<KnowledgeGroupRecord>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2KnowledgeGroupsGet(): kotlin.Array<KnowledgeGroupRecord> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/KnowledgeGroups",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<kotlin.Array<KnowledgeGroupRecord>>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<KnowledgeGroupRecord>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Create a new knowledge group.
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Developer&#x60;**, **&#x60;System&#x60;**
     * @param record  (optional)
     * @return java.util.UUID
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2KnowledgeGroupsPost(record: KnowledgeGroupRecord): java.util.UUID {
        val localVariableBody: kotlin.Any? = record
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Api/v2/KnowledgeGroups",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<java.util.UUID>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as java.util.UUID
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
