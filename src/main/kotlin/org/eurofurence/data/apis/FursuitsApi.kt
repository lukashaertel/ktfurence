/**
 * Eurofurence API for Mobile Apps
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.eurofurence.data.apis

import org.eurofurence.data.infrastructure.*
import org.eurofurence.data.models.*

class FursuitsApi(basePath: kotlin.String = "https://localhost") : ApiClient(basePath) {

    /**
     * Retrieve the badge image content for a given fursuit badge id
     *
     * @param id \&quot;Id\&quot; of the fursuit badge
     * @return ByteArray
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2FursuitsBadgesByIdImageGet(id: java.util.UUID): ByteArray {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Fursuits/Badges/{Id}/Image".replace("{" + "Id" + "}", "$id"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<ByteArray>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ByteArray
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Return all Fursuit Badge Registrations
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Developer&#x60;**, **&#x60;FursuitBadgeSystem&#x60;**, **&#x60;System&#x60;**  **Not meant to be consumed by the mobile apps**
     * @return kotlin.Array<FursuitBadgeRecord>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2FursuitsBadgesGet(): kotlin.Array<FursuitBadgeRecord> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Fursuits/Badges",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<kotlin.Array<FursuitBadgeRecord>>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FursuitBadgeRecord>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Upsert Fursuit Badge information
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Developer&#x60;**, **&#x60;FursuitBadgeSystem&#x60;**, **&#x60;System&#x60;**  This is used by the fursuit badge system to push badge information to this backend.  **Not meant to be consumed by the mobile apps**
     * @param registration  (optional)
     * @return void
     */
    fun apiV2FursuitsBadgesRegistrationPost(registration: FursuitBadgeRegistration): Unit {
        val localVariableBody: kotlin.Any? = registration
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Api/v2/Fursuits/Badges/Registration",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     *
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Attendee&#x60;**
     * @return kotlin.Array<FursuitParticipationInfo>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2FursuitsCollectingGameFursuitParticipationGet(): kotlin.Array<FursuitParticipationInfo> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Fursuits/CollectingGame/FursuitParticipation",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<kotlin.Array<FursuitParticipationInfo>>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FursuitParticipationInfo>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     *
     *
     * @param top
     * @return kotlin.Array<FursuitScoreboardEntry>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2FursuitsCollectingGameFursuitParticipationScoreboardGet(top: kotlin.Int): kotlin.Array<FursuitScoreboardEntry> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("top" to listOf("$top"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Fursuits/CollectingGame/FursuitParticipation/Scoreboard",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<kotlin.Array<FursuitScoreboardEntry>>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<FursuitScoreboardEntry>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Register (link/assign) a valid, unused token to a fursuit badge.
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Attendee&#x60;**
     * @param fursuitBadgeId
     * @param tokenValue  (optional)
     * @return void
     */
    fun apiV2FursuitsCollectingGameFursuitParticpationBadgesByFursuitBadgeIdTokenPost(fursuitBadgeId: java.util.UUID, tokenValue: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = tokenValue
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Api/v2/Fursuits/CollectingGame/FursuitParticpation/Badges/{FursuitBadgeId}/Token".replace("{" + "FursuitBadgeId" + "}", "$fursuitBadgeId"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     *
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Attendee&#x60;**
     * @param fursuitBadgeId
     * @param tokenValue  (optional)
     * @return ApiSafeResult
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2FursuitsCollectingGameFursuitParticpationBadgesByFursuitBadgeIdTokenSafePost(fursuitBadgeId: java.util.UUID, tokenValue: kotlin.String): ApiSafeResult {
        val localVariableBody: kotlin.Any? = tokenValue
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Api/v2/Fursuits/CollectingGame/FursuitParticpation/Badges/{FursuitBadgeId}/Token:safe".replace("{" + "FursuitBadgeId" + "}", "$fursuitBadgeId"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<ApiSafeResult>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ApiSafeResult
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     *
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Attendee&#x60;**
     * @param tokenValue  (optional)
     * @return CollectTokenResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2FursuitsCollectingGamePlayerParticipationCollectTokenPost(tokenValue: kotlin.String): CollectTokenResponse {
        val localVariableBody: kotlin.Any? = tokenValue
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Api/v2/Fursuits/CollectingGame/PlayerParticipation/CollectToken",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<CollectTokenResponse>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CollectTokenResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     *
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Attendee&#x60;**
     * @param tokenValue  (optional)
     * @return ApiSafeResultLeft_Square_BracketCollectTokenResponseRight_Square_Bracket
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2FursuitsCollectingGamePlayerParticipationCollectTokenSafePost(tokenValue: kotlin.String): ApiSafeResultLeft_Square_BracketCollectTokenResponseRight_Square_Bracket {
        val localVariableBody: kotlin.Any? = tokenValue
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Api/v2/Fursuits/CollectingGame/PlayerParticipation/CollectToken:safe",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<ApiSafeResultLeft_Square_BracketCollectTokenResponseRight_Square_Bracket>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ApiSafeResultLeft_Square_BracketCollectTokenResponseRight_Square_Bracket
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     *
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Attendee&#x60;**
     * @return kotlin.Array<PlayerCollectionEntry>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2FursuitsCollectingGamePlayerParticipationCollectionEntriesGet(): kotlin.Array<PlayerCollectionEntry> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Fursuits/CollectingGame/PlayerParticipation/CollectionEntries",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<kotlin.Array<PlayerCollectionEntry>>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PlayerCollectionEntry>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     *
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Attendee&#x60;**
     * @return PlayerParticipationInfo
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2FursuitsCollectingGamePlayerParticipationGet(): PlayerParticipationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Fursuits/CollectingGame/PlayerParticipation",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<PlayerParticipationInfo>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PlayerParticipationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     *
     *
     * @param top
     * @return kotlin.Array<PlayerScoreboardEntry>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2FursuitsCollectingGamePlayerParticipationScoreboardGet(top: kotlin.Int): kotlin.Array<PlayerScoreboardEntry> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("top" to listOf("$top"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Fursuits/CollectingGame/PlayerParticipation/Scoreboard",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<kotlin.Array<PlayerScoreboardEntry>>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PlayerScoreboardEntry>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     *
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Developer&#x60;**, **&#x60;System&#x60;**
     * @param tokenValues  (optional)
     * @return void
     */
    fun apiV2FursuitsCollectingGameTokensBatchPost(tokenValues: kotlin.Array<kotlin.String>): Unit {
        val localVariableBody: kotlin.Any? = tokenValues
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Api/v2/Fursuits/CollectingGame/Tokens/Batch",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     *
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Developer&#x60;**, **&#x60;System&#x60;**
     * @param tokenValue  (optional)
     * @return void
     */
    fun apiV2FursuitsCollectingGameTokensPost(tokenValue: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = tokenValue
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Api/v2/Fursuits/CollectingGame/Tokens",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
