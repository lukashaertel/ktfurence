/**
 * Eurofurence API for Mobile Apps
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.eurofurence.data.apis

import org.eurofurence.data.infrastructure.*
import org.eurofurence.data.models.PrivateMessageRecord
import org.eurofurence.data.models.SendPrivateMessageRequest

class CommunicationApi(basePath: kotlin.String = "https://localhost") : ApiClient(basePath) {

    /**
     * Marks a given private message as read (reading receipt).
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Attendee&#x60;**  Calling this on a message that has already been marked as read  will not update the &#x60;ReadDateTimeUtc&#x60; property, but return the  &#x60;ReadDateTimeUtc&#x60; value of the first call.
     * @param messageId &#x60;Id&#x60; of the message to mark as read
     * @return java.time.LocalDateTime
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2CommunicationPrivateMessagesByMessageIdReadPost(messageId: java.util.UUID): java.time.LocalDateTime {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Api/v2/Communication/PrivateMessages/{MessageId}/Read".replace("{" + "MessageId" + "}", "$messageId"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<java.time.LocalDateTime>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as java.time.LocalDateTime
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Retrieves all private messages of an authenticated attendee.
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Attendee&#x60;**  This will set the &#x60;ReceivedDateTimeUtc&#x60; to the current server time on all messages retrieved  that have not been retrieved in a previous call.
     * @return kotlin.Array<PrivateMessageRecord>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2CommunicationPrivateMessagesGet(): kotlin.Array<PrivateMessageRecord> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Communication/PrivateMessages",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<kotlin.Array<PrivateMessageRecord>>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PrivateMessageRecord>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Sends a private message to a specific recipient/attendee.
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Action-PrivateMessages-Send&#x60;**, **&#x60;Developer&#x60;**, **&#x60;System&#x60;**  If the backend has a push-channel available to any given device(s) that are currently signed into the app  with the same recipient uid, it will push a toast message to those devices.  The toast message content is defined by the &#x60;ToastTitle&#x60; and &#x60;ToastMessage&#x60; properties.
     * @param request  (optional)
     * @return java.util.UUID
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2CommunicationPrivateMessagesPost(request: SendPrivateMessageRequest): java.util.UUID {
        val localVariableBody: kotlin.Any? = request
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Api/v2/Communication/PrivateMessages",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<java.util.UUID>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as java.util.UUID
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
