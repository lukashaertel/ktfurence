/**
 * Eurofurence API for Mobile Apps
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.eurofurence.data.apis


import org.eurofurence.data.infrastructure.*
import org.eurofurence.data.models.ImageRecord

class ImagesApi(basePath: kotlin.String = "https://localhost") : ApiClient(basePath) {

    /**
     * Retrieve a single image content.
     *
     * @param id id of the requested entity
     * @return ByteArray
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2ImagesByIdContentGet(id: java.util.UUID): ByteArray {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Images/{Id}/Content".replace("{" + "Id" + "}", "$id"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<ByteArray>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ByteArray
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Retrieve a single image.
     *
     * @param id id of the requested entity
     * @return ImageRecord
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2ImagesByIdGet(id: java.util.UUID): ImageRecord {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Images/{Id}".replace("{" + "Id" + "}", "$id"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<ImageRecord>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ImageRecord
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Retrieves a list of all images.
     *
     * @return kotlin.Array<ImageRecord>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2ImagesGet(): kotlin.Array<ImageRecord> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Images",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<kotlin.Array<ImageRecord>>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ImageRecord>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
