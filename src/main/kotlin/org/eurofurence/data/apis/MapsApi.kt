/**
 * Eurofurence API for Mobile Apps
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.eurofurence.data.apis

import org.eurofurence.data.infrastructure.*
import org.eurofurence.data.models.MapEntryRecord
import org.eurofurence.data.models.MapRecord

class MapsApi(basePath: kotlin.String = "https://localhost") : ApiClient(basePath) {

    /**
     * Delete a specific map entry for a specific map
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Admin&#x60;**, **&#x60;Developer&#x60;**
     * @param id
     * @param entryId
     * @return void
     */
    fun apiV2MapsByIdEntriesByEntryIdDelete(id: java.util.UUID, entryId: java.util.UUID): Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/Api/v2/Maps/{Id}/Entries/{EntryId}".replace("{" + "Id" + "}", "$id").replace("{" + "EntryId" + "}", "$entryId"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Get all specific map entry for a specific map
     *
     * @param id
     * @param entryId
     * @return MapEntryRecord
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2MapsByIdEntriesByEntryIdGet(id: java.util.UUID, entryId: java.util.UUID): MapEntryRecord {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Maps/{Id}/Entries/{EntryId}".replace("{" + "Id" + "}", "$id").replace("{" + "EntryId" + "}", "$entryId"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<MapEntryRecord>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MapEntryRecord
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Create or Update an existing map entry in a specific map
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Admin&#x60;**, **&#x60;Developer&#x60;**  This both works for updating an existing entry and creating a new entry. The id property of the  model (request body) must match the {EntryId} part of the uri.
     * @param id \&quot;Id\&quot; of the map.
     * @param entryId \&quot;Id\&quot; of the entry that gets inserted.
     * @param record \&quot;Id\&quot; property must match the {EntryId} part of the uri (optional)
     * @return java.util.UUID
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2MapsByIdEntriesByEntryIdPut(id: java.util.UUID, entryId: java.util.UUID, record: MapEntryRecord): java.util.UUID {
        val localVariableBody: kotlin.Any? = record
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/Api/v2/Maps/{Id}/Entries/{EntryId}".replace("{" + "Id" + "}", "$id").replace("{" + "EntryId" + "}", "$entryId"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<java.util.UUID>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as java.util.UUID
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Delete all map entries for a specific map
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Admin&#x60;**, **&#x60;Developer&#x60;**
     * @param id
     * @return void
     */
    fun apiV2MapsByIdEntriesDelete(id: java.util.UUID): Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/Api/v2/Maps/{Id}/Entries".replace("{" + "Id" + "}", "$id"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Get all map entries for a specific map
     *
     * @param id
     * @return kotlin.Array<MapEntryRecord>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2MapsByIdEntriesGet(id: java.util.UUID): kotlin.Array<MapEntryRecord> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Maps/{Id}/Entries".replace("{" + "Id" + "}", "$id"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<kotlin.Array<MapEntryRecord>>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<MapEntryRecord>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Create a new map entry in a specific map
     *   * Requires authorization     * Requires any of the following roles: **&#x60;Admin&#x60;**, **&#x60;Developer&#x60;**  If you can generate guids client-side, you can also use the PUT variant for both create and update.
     * @param id \&quot;Id\&quot; of the map
     * @param record Do not specify the \&quot;Id\&quot; property. It will be auto-assigned and returned in the response. (optional)
     * @return java.util.UUID
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2MapsByIdEntriesPost(id: java.util.UUID, record: MapEntryRecord): java.util.UUID {
        val localVariableBody: kotlin.Any? = record
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/Api/v2/Maps/{Id}/Entries".replace("{" + "Id" + "}", "$id"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<java.util.UUID>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as java.util.UUID
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Get a specific map
     *
     * @param id
     * @return MapRecord
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2MapsByIdGet(id: java.util.UUID): MapRecord {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Maps/{Id}".replace("{" + "Id" + "}", "$id"),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<MapRecord>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MapRecord
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
     * Get all maps
     *
     * @return kotlin.Array<MapRecord>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV2MapsGet(): kotlin.Array<MapRecord> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/Api/v2/Maps",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<kotlin.Array<MapRecord>>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<MapRecord>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException(response.statusCode, (response as ClientError<*>).body as? String
                    ?: "Client error")
            ResponseType.ServerError -> throw ServerException(response.statusCode, (response as ServerError<*>).message
                    ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
