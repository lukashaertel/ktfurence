/**
 * Eurofurence API for Mobile Apps
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.eurofurence.data.models

import kotlinx.serialization.Serializable


/**
 *
 * @param FragmentType
 * @param Name
 * @param Target * For FragmentType `DealerDetail`: The `Id` of the dealer record the link is referencing to.  * For FragmentType `MapEntry`: The `Id` of the map entry record the link is referencing to.  * For FragmentType `EventConferenceRoom`: The `Id` of the event conference room record the link is referencing to.  * For FragmentType `MapExternal`: An stringified json object.    * Acceptable properties and their expected value (type):      * `name` - name of target POI (*string*)      * `street` - street name (*string*)      * `house` - house humber (*string*)      * `zip` - zip code of city (*string*)      * `city` - city (*string*)      * `country` - country (*string*)      * `country-a3` - ISO 3166-1 alpha-3 code for country [http://unstats.un.org/unsd/methods/m49/m49alpha.htm] (*string*)      * `lat` - latitude (*decimal*)      * `lon` - longitude (*decimal*)    * Example:      * `{ name: \"Estrel Hotel Berlin\", house: \"225\", street: \"Sonnenallee\", zip: \"12057\", city: \"Berlin\", country: \"Germany\", lat: 52.473336, lon: 13.458729 }`
 */
@Serializable
data class LinkFragment(
        val FragmentType: FragmentType,
        /* * For FragmentType `DealerDetail`: The `Id` of the dealer record the link is referencing to.  * For FragmentType `MapEntry`: The `Id` of the map entry record the link is referencing to.  * For FragmentType `EventConferenceRoom`: The `Id` of the event conference room record the link is referencing to.  * For FragmentType `MapExternal`: An stringified json object.    * Acceptable properties and their expected value (type):      * `name` - name of target POI (*string*)      * `street` - street name (*string*)      * `house` - house humber (*string*)      * `zip` - zip code of city (*string*)      * `city` - city (*string*)      * `country` - country (*string*)      * `country-a3` - ISO 3166-1 alpha-3 code for country [http://unstats.un.org/unsd/methods/m49/m49alpha.htm] (*string*)      * `lat` - latitude (*decimal*)      * `lon` - longitude (*decimal*)    * Example:      * `{ name: \"Estrel Hotel Berlin\", house: \"225\", street: \"Sonnenallee\", zip: \"12057\", city: \"Berlin\", country: \"Germany\", lat: 52.473336, lon: 13.458729 }` */
        val Target: kotlin.String,
        val Name: kotlin.String? = null
) {

}

